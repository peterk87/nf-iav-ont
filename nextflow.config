/*
 * -------------------------------------------------
 *  peterk87/nf-iav-ont Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

params {
  outdir = 'results'
  tracedir = "${params.outdir}/pipeline_info"
  slurm_queue = ""
}

profiles {
  standard {
    includeConfig 'conf/base.config'
  }
  slurm {
    includeConfig 'conf/base.config'
    includeConfig 'conf/slurm.config'
  }
}

timeline {
  enabled = true
  file = "${params.tracedir}/nf-fmd-illumina_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-fmd-illumina_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-fmd-illumina_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-fmd-illumina_DAG.svg"
}

manifest {
  name = 'peterk87/nf-iav-ont'
  description = 'Nextflow workflow for demultiplexing, Centrifuge taxonomic classification, read-mapping of Influenza A Virus Nanopore reads'
  homePage = 'https://github.com/peterk87/nf-iav-ont'
  author = 'Peter Kruczkiewicz'
  version = '1.0.0'
  nexflowVersion = '>=18.10.1'
  mainScript = 'main.nf'
}

// Following function from https://github.com/nf-core/vipr/blob/master/nextflow.config#L88
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
